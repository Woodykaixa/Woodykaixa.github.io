{"version":3,"sources":["logo.svg","NavBar.tsx","index/IndexPage.tsx","doc-page/DocumentReader.tsx","doc-page/DocPage.tsx","login/LoginPage.tsx","logout/LogoutPage.tsx","register/RegisterPage.tsx","Footer.tsx","common/common.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavBarItem","className","this","props","isLargeScreen","to","link","name","React","Component","UserInfo","toLogin","onPageChanged","toRegister","authButton","loggedIn","showingLogin","onClick","NavBar","handleShowingPageChanged","showLogin","setState","showingLoginPage","onToggleButtonClick","newShowingState","state","showNavBarContent","NavBarContent","toggleButton","items","map","value","index","key","screenWidth","title","IndexPage","avatar","company","github","repos","fetch","then","res","json","avatar_url","html_url","repos_url","repoObjects","r","description","src","alt","href","repo","DocumentReader","filepath","loadMarkdown","text","file","endsWith","fileContent","marked","console","log","setOptions","renderer","Renderer","highlight","code","highlightAuto","gfm","pedantic","breaks","smartLists","smartypants","content","dangerouslySetInnerHTML","__html","sanitize","split","str","line","DocLink","linkName","displayName","DocPage","docs","filename","basename","doc","path","InputComponent","OnChange","e","target","placeholder","type","autoComplete","onChange","LoginPage","onSubmit","preventDefault","loginFunction","redirectTo","window","location","substr","lastIndexOf","logo","LogoutPage","logoutFunction","RegisterPage","Footer","screenHeight","innerHeight","sites","site","width","App","setResponsiveStates","docWidth","document","body","clientWidth","height","clientHeight","onDocumentRerender","userLogin","isLoggedInUser","userLogout","navSites","footerSites","onresize","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,kC,wMCarCC,E,uKAEE,OACI,wBAAIC,UAAWC,KAAKC,MAAMC,cAAgB,UAAY,iBAClD,4BACI,kBAAC,IAAD,CAAMC,GAAIH,KAAKC,MAAMG,MAAOJ,KAAKC,MAAMI,Y,GALlCC,IAAMC,WAkBzBC,E,4MAEFC,QAAU,WACN,EAAKR,MAAMS,eAAc,I,EAG7BC,WAAa,WACT,EAAKV,MAAMS,eAAc,I,uDAIzB,IAAIE,EASJ,OAPIA,EADAZ,KAAKC,MAAMY,SACE,kBAAC,IAAD,CAAMV,GAAG,WAAT,8BACNH,KAAKC,MAAMa,aACL,kBAAC,IAAD,CAAMX,GAAG,YAAYY,QAASf,KAAKW,YAAnC,sBAEA,kBAAC,IAAD,CAAMR,GAAG,SAASY,QAASf,KAAKS,SAAhC,sBAIb,wBAAIV,UAAU,YACV,4BAAKa,Q,GAtBEN,IAAMC,WA2ChBS,EAAb,kDACI,WAAYf,GAA+B,IAAD,8BACtC,cAAMA,IAIVgB,yBAA2B,SAACC,GACxB,EAAKC,SAAS,CAACC,iBAAkBF,KANK,EAS1CG,oBAAsB,WAClB,IAAIC,GAAmB,EAAKC,MAAMC,kBAClC,EAAKL,SAAS,CAACK,kBAAmBF,KATlC,EAAKC,MAAQ,CAACH,kBAAkB,EAAMI,mBAAmB,GAFnB,EAD9C,qDAec,IAIFC,EAJC,OACDC,EAAe1B,KAAKC,MAAMC,cAAgB,KAC1C,4BAAQH,UAAU,eAAegB,QAASf,KAAKqB,sBAiCnD,OA9BIrB,KAAKC,MAAMC,cACXuB,EACI,yBAAK1B,UAAU,0BACX,wBAAIA,UAAU,2BACTC,KAAKC,MAAM0B,MAAMC,KAAI,SAACC,EAAOC,GAAR,OAClB,kBAAC,EAAD,CAAYzB,KAAMwB,EAAMxB,KAAMD,KAAMyB,EAAMzB,KAAM2B,IAAKD,EACzCE,YAAa,EAAK/B,MAAM+B,YACxB9B,cAAe,EAAKD,MAAMC,oBAE9C,kBAAC,EAAD,CAAUW,SAAUb,KAAKC,MAAMY,SACrBC,aAAcd,KAAKuB,MAAMH,iBACzBV,cAAeV,KAAKiB,4BAG/BjB,KAAKuB,MAAMC,oBAClBC,EACI,wBAAI1B,UAAU,yBACTC,KAAKC,MAAM0B,MAAMC,KAAI,SAACC,EAAOC,GAAR,OAClB,kBAAC,EAAD,CAAYzB,KAAMwB,EAAMxB,KAAMD,KAAMyB,EAAMzB,KAAM2B,IAAKD,EACzCE,YAAa,EAAK/B,MAAM+B,YACxB9B,cAAe,EAAKD,MAAMC,mBAC1C,4BACI,kBAAC,EAAD,CAAUW,SAAUb,KAAKC,MAAMY,SACrBC,aAAcd,KAAKuB,MAAMH,iBACzBV,cAAeV,KAAKiB,8BAO1C,yBAAKlB,UAAU,mBACX,yBAAKA,UAAU,cACX,0BAAMA,UAAU,SAASC,KAAKC,MAAMgC,OACnCjC,KAAKC,MAAMC,cAAgBuB,EAAgBC,GAE/C1B,KAAKC,MAAMC,cAAgB,KAAOuB,OAxDnD,GAA4BnB,IAAMC,WCzDrB2B,G,MAAb,kDACI,WAAYjC,GAAa,IAAD,8BACpB,cAAMA,IACDsB,MAAQ,CAAClB,KAAM,GAAI8B,OAAQ,GAAIC,QAAS,GAAIC,OAAQ,GAAIC,MAAO,IAFhD,EAD5B,gEAMyB,IAAD,OAChBC,MAAM,2CAA2CC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GAC1E,EAAKvB,SAAS,CACVgB,OAAQO,EAAKC,WACbtC,KAAMqC,EAAKrC,KACX+B,QAASM,EAAKN,QACdC,OAAQK,EAAKE,WAEjBL,MAAMG,EAAKG,WAAWL,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAACM,GAChD,IAAMR,EAAQQ,EAAYlB,KAAI,SAAAmB,GAC1B,MAAO,CAACd,MAAOc,EAAE1C,KAAMD,KAAM2C,EAAEH,SAAUI,YAAaD,EAAEC,gBAE5D,EAAK7B,SAAS,CAACmB,MAAOA,YAlBtC,+BAwBQ,OACI,yBAAKvC,UAAU,sBACX,yBAAKA,UAAU,0BACX,yBAAKA,UAAU,sBACX,yBAAKkD,IAAKjD,KAAKuB,MAAMY,OAAQe,IAAKlD,KAAKuB,MAAMlB,QAEjD,yBAAKN,UAAU,oBACX,wBAAIA,UAAU,oBAAoBC,KAAKuB,MAAMlB,MAC7C,yBAAKN,UAAU,uBAAuBC,KAAKuB,MAAMa,SACjD,yBAAKrC,UAAU,oBACX,uBAAGoD,KAAMnD,KAAKuB,MAAMc,QAASrC,KAAKuB,MAAMc,WAIpD,wBAAItC,UAAU,qBACV,wDACCC,KAAKuB,MAAMe,MAAMV,KAAI,SAAAwB,GAAI,OAAI,4BAAI,uBAAGD,KAAMC,EAAKhD,MAAOgD,EAAKnB,iBAxChF,GAA+B3B,IAAMC,Y,iCCFxB8C,G,cAAb,kDAII,WAAYpD,GAA6B,IAAD,8BACpC,cAAMA,IAHFqD,cAEgC,IAoBxCC,aAAe,WACXhB,MAAM,EAAKe,UAAUd,MAAK,SAAAC,GAAG,OAAIA,EAAIe,UAAQhB,MAAK,SAAAC,GAC1C,EAAKxC,MAAMwD,KAAKC,SAAS,OACzB,EAAKvC,SAAS,CAACwC,YAAaC,IAAOnB,KAEnC,EAAKtB,SAAS,CAACwC,YAAalB,QAvBpCoB,QAAQC,IAAI,EAAK7D,OACjB2D,IAAOG,WAAW,CACdC,SAAU,IAAIJ,IAAOK,SACrBC,UAAW,SAACC,GAAD,OAAUC,wBAAcD,GAAMtC,OACzCwC,KAAK,EACLC,UAAU,EACVC,QAAQ,EACRC,YAAY,EACZC,aAAa,IAEjB,EAAKnB,SAAoC,IAAM,EAAKrD,MAAMwD,KAC1D,EAAKlC,MAAQ,CAACoC,YAAa,IAbS,EAJ5C,gEAqBQ3D,KAAKuD,iBArBb,+BAoCQ,IAAMmB,EAAU1E,KAAKC,MAAMwD,KAAKC,SAAS,OACrC,yBAAK3D,UAAU,kBACV4E,wBAAyB,CAACC,OAAQC,mBAAS7E,KAAKuB,MAAMoC,gBACzD,yBAAK5D,UAAU,mBACZC,KAAKuB,MAAMoC,YAAYmB,MAAM,MAAMlD,KAAI,SAACmD,EAAKC,GAAN,OACpC,yBAAKjD,IAAKiD,GAAOD,OAE7B,OACI,yBAAKhF,UAAU,qBACV2E,OA7CjB,GAAoCpE,IAAMC,Y,OCLpC0E,G,8KAGE,OAAO,wBAAIlF,UAAU,WAAU,kBAAC,IAAD,CAC3BI,GAAI,IAAMH,KAAKC,MAAMiF,UAAWlF,KAAKC,MAAMkF,kB,GAJjC7E,IAAMC,YAqBf6E,EAAb,kDAaI,WAAYnF,GAAkB,IAAD,8BACzB,cAAMA,IAZVoF,KAAkB,CACd,CACIF,YAAa,mCACbG,SAAU,WAEd,CACIH,YAAa,iCACbG,SAAU,eAMd,EAAK/D,MAAQ,CAAC8D,KAAM,EAAKA,MAFA,EAbjC,qDAmBQ,OAAIrF,KAAKC,MAAMY,SAEP,kBAAC,IAAD,CAAe0E,SAAS,SACpB,kBAAC,IAAD,KACKvF,KAAKuB,MAAM8D,KAAKzD,KAAI,SAAC4D,EAAK1D,GAAN,OACjB,kBAAC,IAAD,CAAOC,IAAKD,EAAO2D,KAAM,IAAMD,EAAIF,UAC/B,kBAAC,EAAD,CAAgB7B,KAAM+B,EAAIF,eAElC,kBAAC,IAAD,CAAOG,KAAK,KACR,6BACI,6BACI,4BACKzF,KAAKuB,MAAM8D,KAAKzD,KACb,SAAC4D,EAAK1D,GAAN,OACI,kBAAC,EAAD,CAASqD,YAAaK,EAAIL,YACjBD,SAAUM,EAAIF,SACdvD,IAAKD,aAY/C,kBAAC,IAAD,CAAU3B,GAAG,+BA/C5B,GAA6BG,IAAMC,W,0BCZ7BmF,E,kDAEF,WAAYzF,GAA6B,IAAD,8BACpC,cAAMA,IAIV0F,SAAW,SAACC,GACR,IAAIC,EAASD,EAAEC,OACf,EAAK1E,SAAS,CAACU,MAAOgE,EAAOhE,SAL7B,EAAKN,MAAQ,CAACM,MAAO,IAFe,E,qDAWpC,OACI,yBAAK9B,UAAU,eAEPC,KAAKC,MAAMC,cACP,2BAAOH,UAAU,aAAaC,KAAKC,MAAM6F,aACzC,KAER,2BAAOC,KAAM/F,KAAKC,MAAM8F,KAAO/F,KAAKC,MAAM8F,KAAO,OAAQ1F,KAAML,KAAKC,MAAMI,KACnEwB,MAAO7B,KAAKuB,MAAMM,MAClBiE,YAAa9F,KAAKC,MAAMC,cAAgB,GAAKF,KAAKC,MAAM6F,YACxDE,aAAkC,aAApBhG,KAAKC,MAAM8F,KAAsB,mBAAqB,KACpEE,SAAUjG,KAAK2F,gB,GAxBTrF,IAAMC,WAuCtB2F,EAAb,kDAEI,WAAYjG,GAAa,IAAD,8BACpB,cAAMA,IAMVkG,SAAW,SAACP,GACRA,EAAEQ,iBACF,EAAKnG,MAAMoG,iBAPX,EAAK9E,MAAQ,CAAC+E,WAAYC,OAAOC,SAASrD,KAAKsD,OAAOF,OAAOC,SAASrD,KAAKuD,YAAY,KAAO,IAC9F7C,QAAQC,IAAI,EAAKvC,MAAM+E,YAHH,EAF5B,qDAeQ,OAAItG,KAAKC,MAAMY,SACJ,kBAAC,IAAD,CAAUV,GAAIH,KAAKuB,MAAM+E,aAEhC,yBAAKvG,UAAU,sBAEPC,KAAKC,MAAMC,cACP,2BAAOH,UAAU,WACb,yBAAKkD,IAAK0D,IAAMzD,IAAI,cAEtB,KAEV,0BAAMnD,UAAU,YAAYoG,SAAUnG,KAAKmG,UACvC,4CACA,kBAAC,EAAD,CAAgB9F,KAAK,OAAOyF,YAAY,qBACxB9D,YAAahC,KAAKC,MAAM+B,YACxB9B,cAAeF,KAAKC,MAAMC,gBAC1C,kBAAC,EAAD,CAAgB6F,KAAK,WAAW1F,KAAK,MAAMyF,YAAY,gBACvC9D,YAAahC,KAAKC,MAAM+B,YACxB9B,cAAeF,KAAKC,MAAMC,gBAC1C,4BAAQH,UAAU,eAAlB,sBAlCpB,GAA+BO,IAAMC,WClDxBqG,EAAb,uKAIQ,OAFI5G,KAAKC,MAAMY,UACXb,KAAKC,MAAM4G,iBACR,kBAAC,IAAD,CAAU1G,GAAG,eAJ5B,GAAgCG,IAAMC,WCNzBuG,EAAb,uKAEQ,OAAO,6CAFf,GAAkCxG,IAAMC,WCW3BwG,G,OAAb,uKAEQ,IAAIhH,EAAY,SAIhB,OAHIC,KAAKC,MAAM+G,aAAeT,OAAOU,cACjClH,GAAa,cAGb,yBAAKA,UAAWA,GACZ,4BACKC,KAAKC,MAAMiH,MAAMtF,KACd,SAACuF,EAAMrF,GAAP,OAAiB,wBAAIC,IAAKD,GAAQqF,EAAK9G,eAV/D,GAA4BC,IAAMC,YCT3B,SAASL,EAAckH,GAC1B,OAAOA,EAAQ,ICqBZ,IAiFQC,EAjFf,kDAUI,WAAYpH,GAAa,IAAD,uBACpB,cAAMA,IAVVqH,oBAAsB,WAClB,IAAMC,EAAWC,SAASC,KAAKC,YAC/B,EAAKvG,SAAS,CACViG,MAAOG,EACPI,OAAQH,SAASC,KAAKG,aACtB1H,cAAeA,EAAcqH,MAIb,EAmBxBM,mBAAqB,WACjB,EAAKP,uBApBe,EAuBxBQ,UAAY,WACR,EAAK3G,SAAS,CAAC4G,gBAAgB,KAxBX,EA2BxBC,WAAa,WACT,EAAK7G,SAAS,CAAC4G,gBAAgB,KA1B/B,IAAMR,EAAWC,SAASC,KAAKC,YAFX,OAGpB,EAAKnG,MAAQ,CACT0G,SAAU,CACN,CAAC5H,KAAM,eAAMD,KAAM,KACnB,CAACC,KAAM,eAAMD,KAAM,UAEvB2H,gBAAgB,EAChBG,YAAa,CACT,CAAC7H,KAAM,wDAEX+G,MAAOG,EACPI,OAAQH,SAASC,KAAKG,aACtB1H,cAAeA,EAAcqH,IAEjChB,OAAO4B,SAAW,EAAKb,oBAhBH,EAV5B,qDA0CQ,OACI,yBAAKvH,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAQ4B,MAAO3B,KAAKuB,MAAM0G,SAAUpH,SAAUb,KAAKuB,MAAMwG,eACjD9F,MAAM,aAAaD,YAAahC,KAAKuB,MAAM6F,MAC3ClH,cAAeF,KAAKuB,MAAMrB,gBAClC,yBAAKH,UAAU,eACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO0F,KAAK,UACR,kBAAC,EAAD,CAAW5E,SAAUb,KAAKuB,MAAMwG,eACrB1B,cAAerG,KAAK8H,UACpB9F,YAAahC,KAAKuB,MAAM6F,MACxBlH,cAAeF,KAAKuB,MAAMrB,iBAEzC,kBAAC,IAAD,CAAOuF,KAAK,WACR,kBAAC,EAAD,CAAY5E,SAAUb,KAAKuB,MAAMwG,eACrBlB,eAAgB7G,KAAKgI,cAErC,kBAAC,IAAD,CAAOvC,KAAK,aACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,SACR,kBAAC,EAAD,CAAS5E,SAAUb,KAAKuB,MAAMwG,kBAElC,kBAAC,IAAD,CAAOtC,KAAK,KACR,kBAAC,EAAD,SAIZ,kBAAC,EAAD,CAAQyB,MAAOlH,KAAKuB,MAAM2G,YAAalG,YAAahC,KAAKuB,MAAM6F,MACvDJ,aAAchH,KAAKuB,MAAMoG,OACzBzH,cAAeF,KAAKuB,MAAMrB,sBAzEtD,GAAyBI,IAAMC,WCdX6H,QACW,cAA7B7B,OAAOC,SAAS6B,UAEe,UAA7B9B,OAAOC,SAAS6B,UAEhB9B,OAAOC,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJjB,SAASkB,eAAe,SDiItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrG,MAAK,SAAAsG,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpF,QAAQoF,MAAMA,EAAMC,a","file":"static/js/main.c04172e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./NavBar.css\";\r\nimport {Link} from 'react-router-dom';\r\nimport {ResponsiveComponentProps} from \"./common/common\";\r\n\r\ninterface NavBarItemProps {\r\n    name: string,\r\n    link: string\r\n}\r\n\r\ninterface ResponsiveNavBarItemProp extends ResponsiveComponentProps, NavBarItemProps {\r\n}\r\n\r\nclass NavBarItem extends React.Component<ResponsiveNavBarItemProp, any> {\r\n    render() {\r\n        return (\r\n            <li className={this.props.isLargeScreen ? \"NavItem\" : \"NarrowNavItem\"}>\r\n                <h3>\r\n                    <Link to={this.props.link}>{this.props.name}</Link>\r\n                </h3>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\ninterface UserInfoProps {\r\n    loggedIn: boolean,\r\n    showingLogin: boolean,\r\n    onPageChanged: (showLogin: boolean) => void\r\n}\r\n\r\nclass UserInfo extends React.Component<UserInfoProps, any> {\r\n\r\n    toLogin = () => {\r\n        this.props.onPageChanged(true);\r\n    }\r\n\r\n    toRegister = () => {\r\n        this.props.onPageChanged(false);\r\n    }\r\n\r\n    render() {\r\n        let authButton;\r\n        if (this.props.loggedIn) {\r\n            authButton = <Link to='/logout'> 退出登录 </Link>;\r\n        } else if (this.props.showingLogin) {\r\n            authButton = <Link to=\"/register\" onClick={this.toRegister}>去注册</Link>;\r\n        } else {\r\n            authButton = <Link to=\"/login\" onClick={this.toLogin}>去登录</Link>;\r\n        }\r\n\r\n        return (\r\n            <ul className=\"UserInfo\">\r\n                <li>{authButton}</li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport interface NavBarProps {\r\n    items: NavBarItemProps[],\r\n    title: string,\r\n    loggedIn: boolean\r\n\r\n}\r\n\r\ninterface ResponsiveNarBarProps extends ResponsiveComponentProps, NavBarProps {\r\n}\r\n\r\ninterface NavBarState {\r\n    showingLoginPage: boolean,\r\n    showNavBarContent: boolean\r\n}\r\n\r\nexport class NavBar extends React.Component<ResponsiveNarBarProps, NavBarState> {\r\n    constructor(props: ResponsiveNarBarProps) {\r\n        super(props);\r\n        this.state = {showingLoginPage: true, showNavBarContent: false};\r\n    }\r\n\r\n    handleShowingPageChanged = (showLogin: boolean) => {\r\n        this.setState({showingLoginPage: showLogin});\r\n    }\r\n\r\n    onToggleButtonClick = () => {\r\n        let newShowingState = !this.state.showNavBarContent;\r\n        this.setState({showNavBarContent: newShowingState});\r\n    }\r\n\r\n    render() {\r\n        let toggleButton = this.props.isLargeScreen ? null :\r\n            <button className=\"ToggleButton\" onClick={this.onToggleButtonClick}/>;\r\n\r\n        let NavBarContent;\r\n        if (this.props.isLargeScreen) {\r\n            NavBarContent = (\r\n                <div className=\"NavBarContentContainer\">\r\n                    <ul className=\"NavBarSiteItemContainer\">\r\n                        {this.props.items.map((value, index) =>\r\n                            <NavBarItem name={value.name} link={value.link} key={index}\r\n                                        screenWidth={this.props.screenWidth}\r\n                                        isLargeScreen={this.props.isLargeScreen}/>)}\r\n                    </ul>\r\n                    <UserInfo loggedIn={this.props.loggedIn}\r\n                              showingLogin={this.state.showingLoginPage}\r\n                              onPageChanged={this.handleShowingPageChanged}/>\r\n                </div>\r\n            );\r\n        } else if (this.state.showNavBarContent) {\r\n            NavBarContent = (\r\n                <ul className=\"NarrowNavBarContainer\">\r\n                    {this.props.items.map((value, index) =>\r\n                        <NavBarItem name={value.name} link={value.link} key={index}\r\n                                    screenWidth={this.props.screenWidth}\r\n                                    isLargeScreen={this.props.isLargeScreen}/>)}\r\n                    <li>\r\n                        <UserInfo loggedIn={this.props.loggedIn}\r\n                                  showingLogin={this.state.showingLoginPage}\r\n                                  onPageChanged={this.handleShowingPageChanged}/>\r\n                    </li>\r\n                </ul>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"NavBarContainer\">\r\n                <div className=\"NavBarMain\">\r\n                    <span className=\"Title\">{this.props.title}</span>\r\n                    {this.props.isLargeScreen ? NavBarContent : toggleButton}\r\n                </div>\r\n                {this.props.isLargeScreen ? null : NavBarContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport \"./IndexPage.css\";\r\n\r\ninterface RepoLink {\r\n    title: string,\r\n    link: string,\r\n    description: string\r\n}\r\n\r\ninterface IndexPageState {\r\n    avatar: string,\r\n    name: string,\r\n    company: string,\r\n    github: string,\r\n    repos: RepoLink[]\r\n}\r\n\r\nexport class IndexPage extends React.Component<any, IndexPageState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {name: '', avatar: '', company: '', github: '', repos: []};\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://api.github.com/users/Woodykaixa').then(res => res.json()).then(json => {\r\n            this.setState({\r\n                avatar: json.avatar_url,\r\n                name: json.name,\r\n                company: json.company,\r\n                github: json.html_url\r\n            });\r\n            fetch(json.repos_url).then(res => res.json()).then((repoObjects: any[]) => {\r\n                const repos = repoObjects.map(r => {\r\n                    return {title: r.name, link: r.html_url, description: r.description};\r\n                });\r\n                this.setState({repos: repos});\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"IndexPageContainer\">\r\n                <div className=\"IndexPageInfoContainer\">\r\n                    <div className=\"IndexPageAvatarBox\">\r\n                        <img src={this.state.avatar} alt={this.state.name}/>\r\n                    </div>\r\n                    <div className=\"IndexPageInfoBox\">\r\n                        <h2 className=\"IndexPageNameBox\">{this.state.name}</h2>\r\n                        <div className=\"IndexPageCompanyBox\">{this.state.company}</div>\r\n                        <div className=\"IndexPageLinkBox\">\r\n                            <a href={this.state.github}>{this.state.github}</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <ul className=\"IndexPageRepoList\">\r\n                    <h3>代码仓库</h3>\r\n                    {this.state.repos.map(repo => <li><a href={repo.link}>{repo.title}</a></li>)}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport marked from 'marked';\r\nimport {highlightAuto} from 'highlight.js';\r\nimport {sanitize} from 'dompurify';\r\nimport 'highlight.js/styles/atom-one-light.css';\r\nimport './DocumentReader.css';\r\n\r\ninterface MarkdownReaderProps {\r\n    file: string\r\n}\r\n\r\ninterface MarkdownReaderState {\r\n    fileContent: string\r\n}\r\n\r\nexport class DocumentReader extends React.Component<MarkdownReaderProps, MarkdownReaderState> {\r\n\r\n    private filepath: string;\r\n\r\n    constructor(props: MarkdownReaderProps) {\r\n        super(props);\r\n        console.log(this.props);\r\n        marked.setOptions({\r\n            renderer: new marked.Renderer(),\r\n            highlight: (code) => highlightAuto(code).value,\r\n            gfm: true, // 允许 GitHub标准的markdown.\r\n            pedantic: false, // 不纠正原始模型任何的不良行为和错误（默认为false）\r\n            breaks: false, // 允许回车换行（该选项要求 gfm 为true）\r\n            smartLists: true, // 使用比原生markdown更时髦的列表\r\n            smartypants: false, // 使用更为时髦的标点\r\n        });\r\n        this.filepath = process.env.PUBLIC_URL + '/' + this.props.file;\r\n        this.state = {fileContent: ''};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadMarkdown();\r\n    }\r\n\r\n    loadMarkdown = () => {\r\n        fetch(this.filepath).then(res => res.text()).then(res => {\r\n            if (this.props.file.endsWith('.md')) {\r\n                this.setState({fileContent: marked(res)});\r\n            } else {\r\n                this.setState({fileContent: res});\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const content = this.props.file.endsWith('.md') ?\r\n            <div className=\"MarkdownContent\"\r\n                 dangerouslySetInnerHTML={{__html: sanitize(this.state.fileContent)}}/>\r\n            : <div className=\"MarkdownContent\">\r\n                {this.state.fileContent.split('\\n').map((str, line) =>\r\n                    <div key={line}>{str}</div>)}\r\n            </div>;\r\n        return (\r\n            <div className=\"MarkdownContainer\">\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {DocumentReader} from \"./DocumentReader\";\r\nimport {Switch, Redirect, Route, Link, BrowserRouter} from 'react-router-dom';\r\nimport \"./DocPage.css\";\r\n\r\ninterface DocLinkProps {\r\n    displayName: string,\r\n    linkName: string\r\n}\r\n\r\nclass DocLink extends React.Component<DocLinkProps, any> {\r\n\r\n    render() {\r\n        return <li className=\"DocLink\"><Link\r\n            to={'/' + this.props.linkName}>{this.props.displayName}</Link></li>;\r\n    }\r\n}\r\n\r\ninterface DocProps {\r\n    loggedIn: boolean\r\n}\r\n\r\ninterface docFile {\r\n    filename: string,\r\n    displayName: string\r\n}\r\n\r\ninterface DocState {\r\n    docs: docFile[],\r\n}\r\n\r\nexport class DocPage extends React.Component<DocProps, DocState> {\r\n\r\n    docs: docFile[] = [\r\n        {\r\n            displayName: 'markdown测试文件',\r\n            filename: 'test.md'\r\n        },\r\n        {\r\n            displayName: 'robots协议文件',\r\n            filename: 'robots.txt'\r\n        }\r\n    ]\r\n\r\n    constructor(props: DocProps) {\r\n        super(props);\r\n        this.state = {docs: this.docs};\r\n    }\r\n\r\n    render() {\r\n        if (this.props.loggedIn) {\r\n            return (\r\n                <BrowserRouter basename='/docs'>\r\n                    <Switch>\r\n                        {this.state.docs.map((doc, index) =>\r\n                            <Route key={index} path={'/' + doc.filename}>\r\n                                <DocumentReader file={doc.filename}/>\r\n                            </Route>)}\r\n                        <Route path='/'>\r\n                            <div>\r\n                                <div>\r\n                                    <ul>\r\n                                        {this.state.docs.map(\r\n                                            (doc, index) =>\r\n                                                <DocLink displayName={doc.displayName}\r\n                                                         linkName={doc.filename}\r\n                                                         key={index}/>\r\n                                        )}\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </Route>\r\n                    </Switch>\r\n                </BrowserRouter>\r\n\r\n            );\r\n        }\r\n\r\n        return <Redirect to='/login?from_link=/docs'/>;\r\n    }\r\n}","import React from 'react';\r\nimport './LoginPage.css';\r\nimport logo from '../logo.svg';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {ResponsiveComponentProps} from \"../common/common\";\r\n\r\n\r\ninterface InputComponentProps extends ResponsiveComponentProps {\r\n    placeholder: string,\r\n    name: string,\r\n    type?: string\r\n}\r\n\r\n\r\ninterface InputComponentState {\r\n    value: string\r\n}\r\n\r\n\r\nclass InputComponent extends React.Component<InputComponentProps, InputComponentState> {\r\n\r\n    constructor(props: InputComponentProps) {\r\n        super(props);\r\n        this.state = {value: ''};\r\n    }\r\n\r\n    OnChange = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLInputElement;\r\n        this.setState({value: target.value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"InputBorder\">\r\n                {\r\n                    this.props.isLargeScreen ?\r\n                        <label className=\"InputHint\">{this.props.placeholder}</label> :\r\n                        null\r\n                }\r\n                <input type={this.props.type ? this.props.type : \"text\"} name={this.props.name}\r\n                       value={this.state.value}\r\n                       placeholder={this.props.isLargeScreen ? \"\" : this.props.placeholder}\r\n                       autoComplete={this.props.type === \"password\" ? \"current-password\" : \"on\"}\r\n                       onChange={this.OnChange}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface LoginProps extends ResponsiveComponentProps {\r\n    loggedIn: boolean,\r\n    loginFunction: () => void\r\n}\r\n\r\ninterface LoginState {\r\n    redirectTo: string\r\n}\r\n\r\nexport class LoginPage extends React.Component<LoginProps, LoginState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {redirectTo: window.location.href.substr(window.location.href.lastIndexOf('=') + 1)};\r\n        console.log(this.state.redirectTo);\r\n    }\r\n\r\n\r\n    onSubmit = (e: React.SyntheticEvent) => {\r\n        e.preventDefault();\r\n        this.props.loginFunction();\r\n    }\r\n\r\n    render() {\r\n        if (this.props.loggedIn)\r\n            return <Redirect to={this.state.redirectTo}/>;\r\n        return (\r\n            <div className=\"LoginFormContainer\">\r\n                {\r\n                    this.props.isLargeScreen ?\r\n                        <aside className=\"ImgArea\">\r\n                            <img src={logo} alt=\"tmp logo\"/>\r\n                        </aside>\r\n                        : null\r\n                }\r\n                <form className=\"LoginForm\" onSubmit={this.onSubmit}>\r\n                    <h3>登录</h3>\r\n                    <InputComponent name=\"name\" placeholder=\"用户名\"\r\n                                    screenWidth={this.props.screenWidth}\r\n                                    isLargeScreen={this.props.isLargeScreen}/>\r\n                    <InputComponent type=\"password\" name=\"pwd\" placeholder=\"密 码\"\r\n                                    screenWidth={this.props.screenWidth}\r\n                                    isLargeScreen={this.props.isLargeScreen}/>\r\n                    <button className=\"LoginButton\">登录</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ninterface LogoutProps {\r\n    loggedIn: boolean,\r\n    logoutFunction: () => void\r\n}\r\n\r\nexport class LogoutPage extends React.Component<LogoutProps, any> {\r\n    render() {\r\n        if (this.props.loggedIn)\r\n            this.props.logoutFunction();\r\n        return <Redirect to='/login'/>\r\n    }\r\n}","import React from 'react';\r\n\r\nexport class RegisterPage extends React.Component<any, any> {\r\n    render() {\r\n        return <div>register</div>\r\n    }\r\n}","import React from \"react\";\r\nimport \"./Footer.css\";\r\nimport {ResponsiveComponentProps} from \"./common/common\";\r\n\r\nexport interface FooterItemProps {\r\n    name: string\r\n}\r\n\r\ninterface FooterProps extends ResponsiveComponentProps {\r\n    sites: FooterItemProps[],\r\n    screenHeight: number\r\n}\r\n\r\nexport class Footer extends React.Component<FooterProps, any> {\r\n    render() {\r\n        let className = \"Footer\";\r\n        if (this.props.screenHeight < window.innerHeight) {\r\n            className += \" FixBottom\";\r\n        }\r\n        return (\r\n            <div className={className}>\r\n                <ul>\r\n                    {this.props.sites.map(\r\n                        (site, index) => <li key={index}>{site.name}</li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}","/**\r\n * 检测屏幕宽度是否属于大屏幕（宽度超过768px）\r\n * @param width 屏幕宽度\r\n */\r\nexport function isLargeScreen(width: number) {\r\n    return width > 768;\r\n}\r\n\r\n/**\r\n * 响应式布局组件需要的属性\r\n */\r\nexport interface ResponsiveComponentProps {\r\n    screenWidth: number,\r\n    isLargeScreen: boolean\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {NavBar} from \"./NavBar\";\nimport {IndexPage} from \"./index/IndexPage\";\nimport {DocPage} from \"./doc-page/DocPage\";\nimport {LoginPage} from \"./login/LoginPage\";\nimport {LogoutPage} from \"./logout/LogoutPage\";\nimport {RegisterPage} from \"./register/RegisterPage\";\nimport {Footer, FooterItemProps} from \"./Footer\";\nimport {Route, BrowserRouter, Switch} from \"react-router-dom\";\nimport {isLargeScreen} from \"./common/common\";\n\ninterface AppNavBarSiteItem {\n    name: string,\n    link: string\n}\n\ninterface AppState {\n    navSites: AppNavBarSiteItem[], // 导航栏显示的链接\n    isLoggedInUser: boolean, // 当前用户已登录\n    footerSites: FooterItemProps[], // 底部页脚显示的链接\n    width: number, // document.body.clientWidth\n    height: number, // document.body.clientHeight\n    isLargeScreen: boolean\n}\n\nexport class App extends React.Component<any, AppState> {\n    setResponsiveStates = () => {\n        const docWidth = document.body.clientWidth;\n        this.setState({\n            width: docWidth,\n            height: document.body.clientHeight,\n            isLargeScreen: isLargeScreen(docWidth)\n        });\n    }\n\n    constructor(props: any) {\n        super(props);\n        const docWidth = document.body.clientWidth;\n        this.state = {\n            navSites: [\n                {name: '关于', link: '/'},\n                {name: '文档', link: '/docs'},\n            ],\n            isLoggedInUser: false,\n            footerSites: [\n                {name: 'Copyright ©2020 Woodykaixa. All rights reserved.'}\n            ],\n            width: docWidth,\n            height: document.body.clientHeight,\n            isLargeScreen: isLargeScreen(docWidth)\n        };\n        window.onresize = this.setResponsiveStates;\n    }\n\n    onDocumentRerender = () => {\n        this.setResponsiveStates();\n    }\n\n    userLogin = () => {\n        this.setState({isLoggedInUser: true});\n    }\n\n    userLogout = () => {\n        this.setState({isLoggedInUser: false});\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <BrowserRouter>\n                    <NavBar items={this.state.navSites} loggedIn={this.state.isLoggedInUser}\n                            title=\"Kaixa Site\" screenWidth={this.state.width}\n                            isLargeScreen={this.state.isLargeScreen}/>\n                    <div className=\"MainContent\">\n                        <Switch>\n                            <Route path=\"/login\">\n                                <LoginPage loggedIn={this.state.isLoggedInUser}\n                                           loginFunction={this.userLogin}\n                                           screenWidth={this.state.width}\n                                           isLargeScreen={this.state.isLargeScreen}/>\n                            </Route>\n                            <Route path=\"/logout\">\n                                <LogoutPage loggedIn={this.state.isLoggedInUser}\n                                            logoutFunction={this.userLogout}/>\n                            </Route>\n                            <Route path=\"/register\">\n                                <RegisterPage/>\n                            </Route>\n                            <Route path=\"/docs\">\n                                <DocPage loggedIn={this.state.isLoggedInUser}/>\n                            </Route>\n                            <Route path=\"/\">\n                                <IndexPage/>\n                            </Route>\n                        </Switch>\n                    </div>\n                    <Footer sites={this.state.footerSites} screenWidth={this.state.width}\n                            screenHeight={this.state.height}\n                            isLargeScreen={this.state.isLargeScreen}/>\n\n                </BrowserRouter>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}